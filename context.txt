RÈGLES OPÉRATIONNELLES :

1.  **Gestion des fichiers manquants :** Si un fichier mentionné est nécessaire à ma compréhension ou à l'exécution d'une tâche mais n'a pas été fourni précédemment, ne l'invente jamais. Signale-moi qu'il est manquant et que tu as besoin que je te fournisse son contenu.

2.  **Format des modifications de fichiers :**
    *   Lorsqu'une modification est apportée à un fichier, fournis une commande `sed` pour Git Bash, **en une seule ligne**, permettant d'appliquer ce patch. (encapsuler l'argument de la commande sed dans des guillemets simples (') au lieu de guillemets doubles)
    *   **Condition :** Ne fournis cette commande `sed` que si elle est basique et ne risque pas de generer une erreur.
    *   Dans ce cas (commande `sed` sans risque), ne montre pas les blocs de code modifiés, donne uniquement la commande `sed`.
    *   **Restriction d'outil :** N'utilise que `sed` pour ces commandes de patch. N'utilise jamais d'autres outils (comme `patch`, `awk`, `tee`, etc.) pour générer la commande de modification.
    *   **Alternative :** Si la commande `sed` requise (en respectant la contrainte d'une seule ligne) risquerait de ne pas fonctionner correctement, ou si une commande `sed` en une seule ligne n'est pas réalisable pour la modification demandée, ne fournis pas de commande. À la place, donne-moi le contenu intégral du fichier modifié.

3.  **Flux de travail séquentiel :** Après avoir proposé une modification (commande `sed` ou fichier complet) pour un fichier, attends explicitement l'accord de l'utilisateur (et non du LLM) avant de proposer des modifications pour un fichier suivant ou de continuer sur une autre tâche.

4.  **Principe de moindre intervention :** Ne fais jamais de zèle. Ne modifie pas des sections de code qui fonctionnent correctement si cela n'est pas explicitement demandé ou absolument nécessaire pour la tâche en cours.

5.  **Anticipation des erreurs et suggestion de vérification :** N'assume pas que les modifications proposées fonctionneront parfaitement du premier coup. Après avoir proposé une modification, suggère brièvement les points clés que je devrais vérifier ou les tests simples que je pourrais effectuer pour m'assurer du bon fonctionnement.

---
FILE_TREE_ANALYSIS:
# --- Root Directory ---
📁 holaf_image_viewer_backend/
  > Backend logic for the Image Viewer.
  📁 routes/
    > Modular API route handlers for the Image Viewer.
    📄 __init__.py
      > Empty. Placeholder.
    📄 edit_routes.py
      > Handles image editing operations (non-destructive).
      @ POST /holaf/images/save-edits
      @ GET /holaf/images/load-edits
      @ POST /holaf/images/delete-edits
      -> holaf_database, holaf_utils
    📄 export_routes.py
      > Prepares and serves image export packages.
      @ POST /holaf/images/prepare-export
      -> FE_PAYLOAD: {paths_canon:[str], export_format:str, include_meta:bool, meta_method:str}
      @ GET /holaf/images/export-chunk
      -> logic.py (for applying edits), holaf_utils
    📄 file_ops_routes.py
      > Handles file system operations (delete, restore).
      @ POST /holaf/images/delete
      @ POST /holaf/images/delete-permanently
      @ POST /holaf/images/restore
      @ POST /holaf/images/empty-trashcan
      -> logic.py, holaf_database
    📄 image_routes.py
      > Core image listing and filtering.
      @ GET /holaf/images/filter-options
      @ POST /holaf/images/list
      -> logic.py, holaf_database
    📄 metadata_routes.py
      > Handles metadata fetching, extraction, and injection.
      @ GET /holaf/images/metadata
      @ POST /holaf/images/extract-metadata
      @ POST /holaf/images/inject-metadata
      -> logic.py, holaf_database, holaf_utils
    📄 thumbnail_routes.py
      > Serves and manages image thumbnails.
      @ GET /holaf/images/thumbnail
      @ POST /holaf/images/prioritize-thumbnails
      @ GET /holaf/images/thumbnail-stats
      @ POST /holaf/images/regenerate-thumbnail
      -> logic.py, holaf_database, holaf_utils
    📄 utility_routes.py
      > Misc utility routes for the viewer.
      @ POST /holaf/images/viewer-activity
      -> worker.py
  📄 __init__.py
    > Exposes BE functions and routes to the main `__init__.py`. An interface file.
    -> .logic, .routes.*, .worker
  📄 logic.py
    > Core image viewer logic (DB sync, metadata extraction, thumbnail creation). Includes `apply_edits_to_image`.
    -> holaf_database, holaf_utils
  📄 routes.py
    > [DEPRECATED] Kept for import safety, but logic is moved to `routes/` subdir.
  📄 worker.py
    > Background thread for thumbnail generation.
    -> logic, holaf_database, holaf_utils
📁 js/
  > Frontend assets.
  📁 css/
    > All CSS files for styling the utilities.
    📄 holaf_image_viewer_styles.css
      > Specific styles for the Image Viewer panel (placeholder).
    📄 holaf_image_viewer.css
      > [MODIFIED] Main stylesheet for the Image Viewer's internal layout (gallery, panes). Includes animation classes (`.entering`, `.exiting`), gallery layout styles, the `flex-grow: 0` fix for thumbnails, and styles for folder lock icons.
    📄 holaf_main_button.css
      > Styles for the main "Holaf's Utilities" button in the ComfyUI menu.
    📄 holaf_model_manager_styles.css
      > Styles for the Model Manager panel.
    📄 holaf_nodes_manager_styles.css
      > Styles for the Nodes Manager panel.
    📄 holaf_settings_panel_styles.css
      > Styles for the global Settings panel.
    📄 holaf_shared_panel.css
      > Core styles for ALL floating panels (drag, resize, header, close button, modals).
    📄 holaf_system_monitor_styles.css
      > Styles for the system monitor overlay.
    📄 holaf_terminal_styles.css
      > Styles for the Terminal panel (login/setup screens).
    📄 holaf_themes.css
      > [CRITICAL] Defines all themes via CSS variables. All other CSS files use these variables.
    📄 holaf_toasts.css
      > [NEW] Styles for the non-blocking toast notification system. Uses theme variables.
    📄 holaf_utilities.css
      > [DEPRECATED/MERGED] Old monolithic CSS. Now split into component files but might be referenced.
  📁 image_viewer/
    > Modular JS for the Image Viewer.
    📄 image_viewer_actions.js
      > [MODIFIED] Handles user actions (delete, export). Now context-aware; uses a helper to target active image in zoom/fullscreen or gallery selection. -> image_viewer_state, HolafPanelManager
    📄 image_viewer_editor.js
      > [MODIFIED] Controller for the Image Editor sub-panel. Dispatches `holaf-refresh-thumbnail` event on save/reset. Applies preview filters. Subscribes to `imageViewerState`.
    📄 image_viewer_gallery.js
      > [MODIFIED] Manages gallery view with differential rendering (`syncGallery`). Contains `initGallery` to listen for refresh events. Handles lazy loading. Corrected selection bug logic.
    📄 image_viewer_infopane.js
      > [REFACTORED] Logic for the right-side info panel. Subscribes to and reads `activeImage` from central state.
    📄 image_viewer_navigation.js
      > [MODIFIED] Handles keyboard input (`handleKeyDown`, including spacebar selection). Applies editor filters to fullscreen/zoom views. Manages `ui.view_mode`.
    📄 image_viewer_settings.js
      > [REFACTORED] Manages load/save to/from central state and applies themes/panel settings. Maps between flat server config and structured state object.
    📄 image_viewer_state.js
      > [MODIFIED] Manages the central state for the Image Viewer (filters, selection, `ui.view_mode`, etc.) using a pub/sub model. Core of the new state-driven architecture. Includes per-folder lock state (`locked_folders`).
    📄 image_viewer_ui.js
      > [MODIFIED] Builds the main panel UI structure. Contains listeners for UI controls like thumbnail size/fit toggles. Subscribes to `imageViewerState`. Updated UI for Reset button position & folder actions (added Invert, per-folder SVG lock icons).
  📁 model_manager/
    > Modular JS for the Model Manager.
    📄 model_manager_actions.js -> holaf_panel_manager
    📄 model_manager_settings.js -> holaf_panel_manager
    📄 model_manager_ui.js -> holaf_panel_manager
    📄 model_manager_view.js -> holaf_panel_manager
  📄 chart.min.js
    > Chart.js library for the system monitor.
  📄 holaf_image_viewer.js
    > [MODIFIED] Main orchestrator. Initializes all modules (UI, Editor, Gallery, etc.). Manages the non-blocking filter request queue (`isLoading`/`isDirty`). Handles per-folder lock state and UI logic, including the advanced reset dialog.
  📄 holaf_main.js
    > [CRITICAL] Main FE entry point.
    > § Creates top menu, loads all CSS assets (including `holaf_toasts.css`).
    > § Initializes and exposes `window.holaf.toastManager`.
    -> holaf_toast_manager, holaf_panel_manager, holaf_terminal, etc.
  📄 holaf_model_manager.js
    > Main controller for the Model Manager.
    -> holaf_panel_manager, model_manager/*
  📄 holaf_monitor.js
    > Controller for the System Monitor overlay.
    -> chart.min.js
  📄 holaf_nodes_manager.js
    > Controller for the Nodes Manager.
    -> holaf_panel_manager
  📄 holaf_panel_manager.js
    > [CRITICAL] Core FE utility. Creates draggable, resizable panels and modals. Exports `HOLAF_THEMES`.
  📄 holaf_settings_manager.js
    > Controller for the global Settings panel.
    -> holaf_panel_manager
  📄 holaf_toast_manager.js
    > [NEW & CRITICAL] Manages creation and lifecycle of toast notifications. Exposes global `window.holaf.toastManager`. Applies a default theme to its container to ensure readability.
  📄 holaf_terminal.js
    > Main controller for the Terminal.
    -> holaf_panel_manager, xterm.js, xterm-addon-fit.js
  📄 xterm-addon-fit.js
    > Add-on for xterm.js to resize the terminal.
  📄 xterm.js
    > Core library for the terminal emulation.
📁 nodes/
  > Custom nodes for ComfyUI, loaded by root `__init__.py`.
  📄 holaf_model_manager.py
    > BE logic for the Model Manager (scanning models, DB interaction, deep scan).
    -> holaf_database
  📄 holaf_nodes_manager.py
    > BE logic for the Nodes Manager (scanning node folders, git actions, README fetching).
📄 __init__.py
  > [CRITICAL] Main extension entry point.
  > § Imports all BE modules.
  > § Initializes DB, Config.
  > § Registers all API routes (@), including critical UI state saving endpoints like `/holaf/image-viewer/save-settings`.
  > § Patches ComfyUI's `SaveImage` node for live updates.
  > § Starts background worker threads (thumbnailing, DB sync).
  > § Dynamically loads custom nodes from the `nodes/` directory.
📄 __main__.py
  > Standalone utility script to generate a password hash for `config.ini`. Not used by the running server.
📄 deepscan.txt
  > Documentation/plan for the "Deep Scan" feature. Not code.
📄 holaf_config.py
  > Manages `config.ini` file. Reads/writes settings, including complex ones like filter arrays as JSON strings.
📄 holaf_database.py
  > Manages the single `holaf_utilities.sqlite` database file, including schema creation and migration.
📄 holaf_server_management.py
  > Handles server restart logic.
📄 holaf_system_monitor.py
  > BE for the System Monitor. Gets system stats (psutil, nvidia-smi) and serves them via WebSocket (WS).
📄 holaf_terminal.py
  > BE for the Terminal. Handles password auth and WebSocket (WS) PTY sessions.
📄 holaf_utils.py
  > Shared Python utility functions (sanitization, file chunking, temp dirs).
📄 model_types.json
  > Configuration file defining known model types, their folders, and formats. Used by `holaf_model_manager.py`.
📄 README.md
  > Main project documentation and security warning.
📄 requirements.txt
  > Python package dependencies (`psutil`, `pywinpty`, `aiofiles`).

---
PROJECT_STATE:
  ACTIVE_BUGS:
    - [bug, state, folder_lock_persistence] # L'état de verrouillage des dossiers n'est pas sauvegardé et restauré après un redémarrage de ComfyUI.
    - [bug, ui, scope_buttons_unresponsive] # Les boutons de portée de recherche ('Name'/'Prompt'/'Workflow') ne déclenchent pas de rafraîchissement de la galerie si la barre de recherche est vide, ce qui les fait paraître non fonctionnels.
    - [bug, ui, filter_label_position] # Le titre de la section 'Filters' est mal positionné, en dessous de la barre de recherche au lieu d'être au-dessus.
  IN_PROGRESS:
    # (None currently identified)
  ROADMAP:
    Global:
      - [new_tool, session_log_tool] # Add a new panel to log user and system actions.
      - [backend, periodic_maintenance_worker] # Hourly worker to clean DB and cache.
    ImageViewer:
      - [feature, realtime_file_monitoring] # Replace periodic scan with `watchdog` for instant updates.
      - [feature, corrupted_file_management] # Auto-move unreadable images to `output/corrupted`.
      - [define, define_edit_button_action] # Define the action for the "Edit" button (e.g., rename, tag).
      - [feature, implement_slideshow] # Implement a slideshow mode.
    ImageEditor:
      - [feature, ui, export_unsaved_changes_dialog] # On export, if edits are unsaved, prompt user: [Save & Export, Export without Saving, Don't Export, Cancel].
      - [feature, ui, editor_operations_tab(toggle_preview,copy_paste)] # Implement the "Operations" tab with toggle preview and copy/paste settings.
      - [feature, feature_crop_expand(canvas,Pillow_backend)]
      - [feature, feature_white_balance_rgb(canvas,Pillow_backend)]
      - [feature, feature_vignette(css,Pillow_backend)]
      - [feature, feature_watermark_overlay]
  COMPLETED_FEATURES:
    - [fix, ui, editor_previews_on_fullscreen_stale] # Correction des aperçus de l'éditeur en direct en vue plein écran/zoom pour qu'ils affichent toujours les effets de l'image active.
    - [feature, ui, folder_filter_enhancements] # Added folder filter enhancements: "Invert" action, per-folder SVG lock icons, and an advanced reset dialog that respects locked folders' state.
    - [fix, ui, gallery_last_row_justification] # Corrected CSS for the last row of thumbnails to prevent stretching.
    - [fix, ui, thumbnail_fit_toggle_immediate_update] # The "Contained" thumbnail view option now applies instantly.
    - [feature, ui, spacebar_to_toggle_selection_in_gallery] # Pressing spacebar on an active thumbnail now toggles its selection state.
    - [fix, ui, actions_target_active_image_in_zoom_view] # Toolbar actions (Delete, Export, etc.) now correctly target the active image in zoom/fullscreen view.
    - [fix, ui, editor_previews_in_fullscreen] # Live edit previews are now correctly applied to the image in fullscreen mode.
    - [fix, ui, thumbnail_refresh_on_edit_save] # Thumbnail in gallery now updates instantly after an edit is saved, using an event-driven approach.
    - [refactor, ui, gallery_differential_rendering] # Replaced full gallery redraws with a non-blocking, differential rendering engine for fluid filter changes.
    - [fix, ui, filter_race_condition] # Implemented a non-blocking request queue (`isLoading`/`isDirty`) to handle rapid filter changes without losing state.
    - [fix, ui, gallery_selection_bug] # Corrected a bug where clicking a thumbnail selected the wrong image after a filter change.
    - [fix, ui, filter_persistence_partial] # Text search and date range filters now correctly restore their state when the panel is reopened.
    - [feature, ui, gallery_empty_on_no_folder_selection] # The gallery now displays no images when no folders are selected, for a more intuitive UX.
    - [feature, ui, editor_save_cancel_and_unsaved_warning] # Implemented Save/Cancel buttons and a warning dialog for unsaved changes during navigation.
    - [feature, backend, thumbnail_regeneration_with_edits] # Implemented backend logic to regenerate thumbnails with edits applied after Save/Reset actions.
    - [feature, state_driven_architecture] # Major refactor to a state-driven FE architecture.
    - [refactor, fix, image_viewer_editor_and_navigation_state] # Decoupled the Editor and Navigation modules from the main controller.
    - [refactor, image_viewer_infopane_state_driven] # Refactored the info pane to subscribe to the central state.
    - [fix, image_viewer_selection_and_state_bug] # Rebuilt gallery selection logic to be fully state-driven and fixed a critical bug in the state manager.
    - [fix, image_viewer_filter_persistence_full] # Corrected BE save/load logic for all filters and fixed FE data parsing.
    - [fix, toast_theming_and_readability] # Corrected toast manager to apply a theme directly.
    - [feature, ui, toasts_notification_system_base] # Initial implementation of the non-blocking toast system.
    - [major_refactor_backend_frontend]
    - [image_editor_base_architecture]
    - [image_viewer_trashcan]
    - [image_viewer_metadata_tools]
    - [image_editor_initial_bugfixes]
    - [thumbnail_cache_system]
    - [fix, export_workflow_save_fails] # Corrected FE/BE data mismatch and added fallback logic.
    - [feature, ui, image_viewer_reset_filters_button] # Added a button to reset all filters to default.
    - [fix, ui, thumbnail_size_realtime_update] # Thumbnail size slider now updates gallery size instantly.