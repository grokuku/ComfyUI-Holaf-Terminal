FILE_TREE_ANALYSIS:
# --- Root Directory ---
📁 holaf_image_viewer_backend/
  > Backend logic for the Image Viewer.
  📁 routes/
    > Modular API route handlers for the Image Viewer.
    📄 __init__.py
      > Empty. Placeholder.
    📄 edit_routes.py
      > Handles image editing operations (non-destructive).
      @ POST /holaf/images/save-edits
      @ GET /holaf/images/load-edits
      @ POST /holaf/images/delete-edits
      -> holaf_database, holaf_utils
    📄 export_routes.py
      > Prepares and serves image export packages.
      @ POST /holaf/images/prepare-export
      -> FE_PAYLOAD: {paths_canon:[str], export_format:str, include_meta:bool, meta_method:str}
      @ GET /holaf/images/export-chunk
      -> logic.py (for applying edits), holaf_utils
    📄 file_ops_routes.py
      > Handles file system operations (delete, restore).
      @ POST /holaf/images/delete
      @ POST /holaf/images/delete-permanently
      @ POST /holaf/images/restore
      @ POST /holaf/images/empty-trashcan
      -> logic.py, holaf_database
    📄 image_routes.py
      > Core image listing and filtering.
      @ GET /holaf/images/filter-options
      @ POST /holaf/images/list
      -> logic.py, holaf_database
    📄 metadata_routes.py
      > Handles metadata fetching, extraction, and injection.
      @ GET /holaf/images/metadata
      @ POST /holaf/images/extract-metadata
      @ POST /holaf/images/inject-metadata
      -> logic.py, holaf_database, holaf_utils
    📄 thumbnail_routes.py
      > Serves and manages image thumbnails.
      @ GET /holaf/images/thumbnail
      @ POST /holaf/images/prioritize-thumbnails
      @ GET /holaf/images/thumbnail-stats
      -> logic.py, holaf_database, holaf_utils
    📄 utility_routes.py
      > Misc utility routes for the viewer.
      @ POST /holaf/images/viewer-activity
      -> worker.py
  📄 __init__.py
    > Exposes BE functions and routes to the main `__init__.py`. An interface file.
    -> .logic, .routes.*, .worker
  📄 logic.py
    > Core image viewer logic (DB sync, metadata extraction, thumbnail creation).
    -> holaf_database, holaf_utils
  📄 routes.py
    > [DEPRECATED] Kept for import safety, but logic is moved to `routes/` subdir.
  📄 worker.py
    > Background thread for thumbnail generation.
    -> logic, holaf_database, holaf_utils
📁 js/
  > Frontend assets.
  📁 css/
    > All CSS files for styling the utilities.
    📄 holaf_image_viewer_styles.css
      > Specific styles for the Image Viewer panel (placeholder).
    📄 holaf_image_viewer.css
      > Main stylesheet for the Image Viewer's internal layout (gallery, panes).
    📄 holaf_main_button.css
      > Styles for the main "Holaf's Utilities" button in the ComfyUI menu.
    📄 holaf_model_manager_styles.css
      > Styles for the Model Manager panel.
    📄 holaf_nodes_manager_styles.css
      > Styles for the Nodes Manager panel.
    📄 holaf_settings_panel_styles.css
      > Styles for the global Settings panel.
    📄 holaf_shared_panel.css
      > Core styles for ALL floating panels (drag, resize, header, close button, modals).
    📄 holaf_system_monitor_styles.css
      > Styles for the system monitor overlay.
    📄 holaf_terminal_styles.css
      > Styles for the Terminal panel (login/setup screens).
    📄 holaf_themes.css
      > [CRITICAL] Defines all themes via CSS variables. All other CSS files use these variables.
    📄 holaf_toasts.css
      > [NEW] Styles for the non-blocking toast notification system. Uses theme variables.
    📄 holaf_utilities.css
      > [DEPRECATED/MERGED] Old monolithic CSS. Now split into component files but might be referenced.
  📁 image_viewer/
    > Modular JS for the Image Viewer.
    📄 image_viewer_actions.js
      > Handles user actions (delete, export).
      > § Initiates toast notifications for long-running tasks like export.
      -> HolafPanelManager, window.holaf.toastManager
    📄 image_viewer_editor.js -> Controller for the Image Editor sub-panel.
    📄 image_viewer_gallery.js -> Gallery rendering, thumbnail loading, intersection observer.
    📄 image_viewer_infopane.js -> Logic for the right-side info panel.
    📄 image_viewer_navigation.js -> Keyboard/mouse navigation, zoom/pan, fullscreen logic.
    📄 image_viewer_settings.js -> Manages settings object, load/save API calls, theme application.
    📄 image_viewer_ui.js -> Generates static HTML structure for the panel.
  📁 model_manager/
    > Modular JS for the Model Manager.
    📄 model_manager_actions.js -> holaf_panel_manager
    📄 model_manager_settings.js -> holaf_panel_manager
    📄 model_manager_ui.js -> holaf_panel_manager
    📄 model_manager_view.js -> holaf_panel_manager
  📄 chart.min.js
    > Chart.js library for the system monitor.
  📄 holaf_image_viewer.js
    > [CRITICAL] Main controller for the Image Viewer. Orchestrates all `image_viewer/` modules.
    > § Manages main state including settings, filteredImages, and event listeners for filters.
    > § Manages the export download queue and updates toast progress.
    -> holaf_panel_manager, image_viewer/*
  📄 holaf_main.js
    > [CRITICAL] Main FE entry point.
    > § Creates top menu, loads all CSS assets (including `holaf_toasts.css`).
    > § Initializes and exposes `window.holaf.toastManager`.
    -> holaf_toast_manager, holaf_panel_manager, holaf_terminal, etc.
  📄 holaf_model_manager.js
    > Main controller for the Model Manager.
    -> holaf_panel_manager, model_manager/*
  📄 holaf_monitor.js
    > Controller for the System Monitor overlay.
    -> chart.min.js
  📄 holaf_nodes_manager.js
    > Controller for the Nodes Manager.
    -> holaf_panel_manager
  📄 holaf_panel_manager.js
    > [CRITICAL] Core FE utility. Creates draggable, resizable panels and modals. Exports `HOLAF_THEMES`.
  📄 holaf_settings_manager.js
    > Controller for the global Settings panel.
    -> holaf_panel_manager
  📄 holaf_toast_manager.js
    > [NEW & CRITICAL] Manages creation and lifecycle of toast notifications.
    > § Exposes a global `window.holaf.toastManager`.
    > § Designed to be theme-aware, but currently has a bug.
  📄 holaf_terminal.js
    > Main controller for the Terminal.
    -> holaf_panel_manager, xterm.js, xterm-addon-fit.js
  📄 xterm-addon-fit.js
    > Add-on for xterm.js to resize the terminal.
  📄 xterm.js
    > Core library for the terminal emulation.
📁 nodes/
  > Custom nodes for ComfyUI, loaded by root `__init__.py`.
  📄 holaf_model_manager.py
    > BE logic for the Model Manager (scanning models, DB interaction, deep scan).
    -> holaf_database
  📄 holaf_nodes_manager.py
    > BE logic for the Nodes Manager (scanning node folders, git actions, README fetching).
📄 __init__.py
  > [CRITICAL] Main extension entry point.
  > § Imports all BE modules.
  > § Initializes DB, Config.
  > § Registers all API routes (@).
  > § Patches ComfyUI's `SaveImage` node for live updates.
  > § Starts background worker threads (thumbnailing, DB sync).
  > § Dynamically loads custom nodes from the `nodes/` directory.
📄 __main__.py
  > Standalone utility script to generate a password hash for `config.ini`. Not used by the running server.
📄 deepscan.txt
  > Documentation/plan for the "Deep Scan" feature. Not code.
📄 holaf_config.py
  > Manages `config.ini` file (reading/writing settings).
📄 holaf_database.py
  > Manages the single `holaf_utilities.sqlite` database file, including schema creation and migration.
📄 holaf_server_management.py
  > Handles server restart logic.
📄 holaf_system_monitor.py
  > BE for the System Monitor. Gets system stats (psutil, nvidia-smi) and serves them via WebSocket (WS).
📄 holaf_terminal.py
  > BE for the Terminal. Handles password auth and WebSocket (WS) PTY sessions.
📄 holaf_utils.py
  > Shared Python utility functions (sanitization, file chunking, temp dirs).
📄 image_editor_plan.md
  > Documentation/plan for the Image Editor feature. Not code.
📄 model_types.json
  > Configuration file defining known model types, their folders, and formats. Used by `holaf_model_manager.py`.
📄 README.md
  > Main project documentation and security warning.
📄 requirements.txt
  > Python package dependencies (`psutil`, `pywinpty`, `aiofiles`).

PROJECT_STATE:
  # Source: README.md, image_editor_plan.md
  ACTIVE_BUGS:
    - [high, css/js, toast_background_transparent] # Toast notifications have a transparent background, making them unreadable. Theming variables are not being applied correctly.
    - [high, js, image_viewer_filters_not_persisting] # Image viewer filters are reset after a ComfyUI reboot. Settings are likely not being saved to the config file correctly.
  IN_PROGRESS:
  ROADMAP:
    Global:
      - [new_tool, session_log_tool] # Add a new panel to log user and system actions.
      - [backend, periodic_maintenance_worker] # Hourly worker to clean DB and cache.
    ImageViewer:
      - [feature, state_driven_architecture] # Major refactor to a state-driven FE architecture.
      - [feature, realtime_file_monitoring] # Replace periodic scan with `watchdog` for instant updates.
      - [feature, corrupted_file_management] # Auto-move unreadable images to `output/corrupted`.
      - [ui, folder_filter_enhancements(invert,lock)] # Add "Invert" and "Lock" to folder filter UI.
      - [define, define_edit_button_action] # Define the action for the "Edit" button (e.g., rename, tag).
      - [feature, implement_slideshow] # Implement a slideshow mode.
    ImageEditor:
      - [feature, feature_crop_expand(canvas,Pillow_backend)]
      - [feature, feature_white_balance_rgb(canvas,Pillow_backend)]
      - [feature, feature_vignette(css,Pillow_backend)]
      - [feature, feature_watermark_overlay]
      - [ui, operations_tab(copy,paste,import,export_edt,toggle)]
  COMPLETED_FEATURES:
    - [feature, ui, toasts_notification_system_base] # Initial implementation of the non-blocking toast system.
    - [major_refactor_backend_frontend]
    - [image_editor_base_architecture]
    - [image_viewer_trashcan]
    - [image_viewer_metadata_tools]
    - [image_editor_initial_bugfixes]
    - [thumbnail_cache_system]
    - [fix, export_workflow_save_fails] # Corrected FE/BE data mismatch and added fallback logic.
    - [fix, filter_persistence_fails] # Refactored state management for full filter persistence.
    - [feature, ui, image_viewer_reset_filters_button] # Added a button to reset all filters to default.